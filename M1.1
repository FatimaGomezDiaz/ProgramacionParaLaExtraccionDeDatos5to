#Ejercicio 1 - Duplicados
# Alumna: Fatima Gómez Díaz 
# Grupo: 951 
# Fecha: 20 de Agosto 2023
#1.Duplicados. Dada una lista de números enteros, retorna True si al menos un
valor aparece dos veces, y Falso si todos los elementos son distintos.

def duplicados(nums):
    numeros = []

    for num in nums:
        if num in numeros:
            return True
        numeros.append(num)

    return False

# Ejemplos
nums1 = [1, 2, 3, 1]
print(duplicados(nums1))

nums2 = [1, 2, 3, 4]
print(duplicados(nums2))


#Ejercicio 2 - Suma de dos números
# Alumna: Fatima Gómez Díaz 
# Grupo: 951 
# Fecha: 20 de Agosto 2023
#2.Suma de dos números. Dado una lista de números enteros y
un valor entero (target), retorna el índice de los dos números
que sumados sean igual al target. Debe asumir que existe siempre
una única solución, y que los elementos no se pueden usar dos veces.
Debes retornar una tupla con los índices.

def Suma(nums, target):
    indices = {}

    for i, num in enumerate(nums):
        op = target - num
        if op in indices:
            return (indices[op], i)
        indices[num] = i
    return

# Ejemplos:
nums1 = [2, 7, 11, 15]
target1 = 9
print(Suma(nums1, target1))

nums2 = [3, 2, 4]
target2 = 6
print(Suma(nums2, target2))


#Ejercicio 3 - Encriptar
# Alumna: Fatima Gómez Díaz 
# Grupo: 951 
# Fecha: 20 de Agosto 2023
#3.Encriptar. Diseñe una función encripta(s, clave),
que reciba un string s con un mensaje y un string con una clave de codificación,
y retorne el mensaje codificado según la clave leída. Los signos de puntuación y
dígitos que aparecen en el mensaje deben conservarse sin cambios.

def encripta(s, clave):
    alfabeto = 'abcdefghijklmnopqrstuvwxyz'
    encriptado = {alfabeto [i]: letra for i, letra in enumerate(clave)}

    mensaje = [encriptado[letra] if letra in encriptado else letra for letra in s]
    return ''.join(mensaje)

# Ejemplos
clave = 'ixmrklstnuzbowfaqejdcpvhyg'
texto1 = 'cafe'
print(encripta(texto1, clave))

texto2 = 'dame 1 chocolate'
print(encripta(texto2, clave))


#Ejercicio 4 - Desencriptar
# Alumna: Fatima Gómez Díaz 
# Grupo: 951 
# Fecha: 20 de Agosto 2023
#4.Desencriptar. Diseña una función desencripta(s, clave) que realice la función inversa 
a la función anterior, es decir, reciba un string s y una clave y realice la desencriptación 
del mensaje en el string devolviendo la cadena desencriptada. 


def desencripta(s, clave):
    alfabeto_original = 'abcdefghijklmnopqrstuvwxyz'
    alfabeto_clave = clave.strip()

    decodificacion = {letra_clave: letra_original for letra_clave, letra_original in
                      zip(alfabeto_clave, alfabeto_original)}

    mensaje= [decodificacion.get(letra, letra) for letra in s]
    return ''.join(mensaje)


# Ejemplo
clave = 'ixmrklstnuzbowfaqejdcpvhyg'

mensaje_codificado1 = 'milk'
print(desencripta(mensaje_codificado1, clave))

mensaje_codificado2 = 'riok 1 mtfmfbidk'
print(desencripta(mensaje_codificado2, clave))


#Ejercicio 5 - Pensionistas
# Alumna: Fatima Gómez Díaz 
# Grupo: 951 
# Fecha: 20 de Agosto 2023
#5.Gestión de Pensionistas. Crear una clase llamada GrupoPensionistas la cual tendrá un único atributo una lista o diccionario de objetos de tipo Pensionista (Elija a conveniencia si una lista o diccionario). Cada objeto de Pensionista tiene los siguientes atributos: identificador del pensionista (string), un entero que indica la edad y una serie de gastos mensuales que se guardan (lista de enteros). El número de gastos mensuales puede variar entre pensionistas. Por ejemplo, el pensionista con identificador '1111A' se llama 'Carlos' tiene 68 años y tiene 3 gastos mensuales de 640, 589 y 573. La clase GrupoPensionistas debe tener los siguientes métodos:

class Pensionista:
    def __init__(self, identificador, edad, gastos_mensuales):
        self.identificador = identificador
        self.edad = edad
        self.gastos_mensuales = gastos_mensuales

class GrupoPensionistas:
    def __init__(self):
        self.pensionistas = []

    def pensionista(self, pensionista):
        self.pensionistas.append(pensionista)

#a.mediaGastos(identificador) , dado el identificador o índice de un pensionista, devuelva el
# promedio de los gastos.
    def mediaGastos(self, identificador):
        for pensionista in self.pensionistas:
            if pensionista.identificador == identificador:
                return sum(pensionista.gastos_mensuales) / len(pensionista.gastos_mensuales)
        return None

#b.mediaEdad(), dado todos los pensionados, devuelve el promedio de las edades.
    def mediaEdad(self):
        if not self.pensionistas:
            return None
        total_edad = sum(p.edad for p in self.pensionistas)
        return total_edad / len(self.pensionistas)

#c.edadesExtremas(), dado todos los pensionados, devuelva al pensionado con
# menor y mayor edad en una tupla
    def edadesmasymenos(self):
        if not self.pensionistas:
            return None
        min_pensionista = min(self.pensionistas, key=lambda p: p.edad)
        max_pensionista = max(self.pensionistas, key=lambda p: p.edad)
        return (min_pensionista.identificador, min_pensionista.edad,max_pensionista.identificador, max_pensionista.edad)

#d.sumaPromedio(), dado todos los pensionados, devuelva la suma del promedio de los gastos de todos los pensionistas de la lista.
    def sumaPromedio(self):
        total_gastos = sum(sum(p.gastos_mensuales) / len(p.gastos_mensuales) for p in self.pensionistas)
        return total_gastos

#e.mediaMaxima(), dado todos los pensionistas, retorne el mayor promedio de los gastos entre todos los pensionistas de la lista, su nombre e identificador.
    def mediaMaxima(self):
        if not self.pensionistas:
            return None
        max_media = max((sum(p.gastos_mensuales) / len(p.gastos_mensuales), p.identificador, p.edad) for p in self.pensionistas)
        return max_media

#f.gastoPromedio(lst), dado todos los pensionistas, devuelve una lista con el gasto promedio de cada persona. La lista resultante debe estar ordenada de forma ascendente.
    def gastoPromedio(self):
        gastos_promedio = [(sum(p.gastos_mensuales) / len(p.gastos_mensuales)) for p in self.pensionistas]
        return sorted(gastos_promedio)

#Datos
Carlos = Pensionista('1111A', 68, [640, 589, 573])
Juan = Pensionista('1111B', 70, [690, 620, 530])
Enrique = Pensionista('1111C', 60, [700, 610, 540])
grupo = GrupoPensionistas()
grupo.pensionista(Carlos)
grupo.pensionista(Juan)
grupo.pensionista(Enrique)


print("Media de gastos de Enrique:", grupo.mediaGastos('1111C'))
print("Media edad:", grupo.mediaEdad())
print("Más Joven y más viejo:", grupo.edadesmasymenos())
print("Promedio de gastos de todos los pensionados:", grupo.sumaPromedio())
print("Mayor promedio de gastos:", grupo.mediaMaxima())
print("Promedios de gastos por orden:", grupo.gastoPromedio())



#Ejercicio 6 - Estadistica
# Alumna: Fatima Gómez Díaz 
# Grupo: 951 
# Fecha: 20 de Agosto 2023
#6.Estadística Básica. Cree una clase llamada Estadística que contiene como atributo una lista de números naturales la cual puede contener repetidos. Debe contener los siguientes métodos:
 
class Estadistica:
    def __init__(self, lista_numeros):
        self.lista_numeros = lista_numeros

#a.Frecuencia de Números. Dada la lista, devuelve un diccionario con el número de veces que aparece cada número en la lista.
    def frecuenciaNumeros(self):
        frecuenciaN = {}
        for num in self.lista_numeros:
            if num \
                    in frecuenciaN:
                frecuenciaN[num] += 1
            else:
                frecuenciaN[num] = 1
        return frecuenciaN

#b.Moda. Dada la lista, devuelva la moda de la lista (el valor más repetido). Puedes usar la función anterior como ayuda.
    def moda(self):
        frecuenciaN = self.frecuenciaNumeros()
        n_frecuencia = max(frecuenciaN.values())
        moda1 = [num for num, frecuencia
                 in frecuenciaN.items()
                 if frecuencia == n_frecuencia]
        return moda1

#c.Histograma. Dada la lista, muestra el histograma de la lista. Puedes reusar los métodos anteriores.
    def histograma(self):
        frecuenciaN = self.frecuenciaNumeros()
        for num, frecuencia \
                in frecuenciaN.items():
            print(f"{num} {'*' * frecuencia}")

#Ejemplo:
lista = [1, 3, 2, 4, 2, 2, 3, 2, 4, 1, 2, 1, 2, 3, 1, 3, 1]
estadistica = Estadistica(lista)
estadistica.histograma()








